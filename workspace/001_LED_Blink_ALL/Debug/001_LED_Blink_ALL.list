
001_LED_Blink_ALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b30  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d10  08003d10  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d18  08003d18  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08003d2c  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08003dcc  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006a0  2000014c  08003e6c  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007ec  08003e6c  000207ec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000117de  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000020ac  00000000  00000000  0003195a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c78  00000000  00000000  00033a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000bb0  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026594  00000000  00000000  00035230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ec66  00000000  00000000  0005b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ede8d  00000000  00000000  0006a42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001582b7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000341c  00000000  00000000  00158308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003ce0 	.word	0x08003ce0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08003ce0 	.word	0x08003ce0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fbf5 	bl	8000cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f81c 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f92e 	bl	8000778 <MX_GPIO_Init>
  MX_ETH_Init();
 800051c:	f000 f880 	bl	8000620 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f8cc 	bl	80006bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 f8fa 	bl	800071c <MX_USB_OTG_FS_PCD_Init>

    /* USER CODE BEGIN 3 */
	// LED1 -> PB0
	// LED2 -> PB7
	// LED3 -> PB14
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000528:	2101      	movs	r1, #1
 800052a:	4808      	ldr	r0, [pc, #32]	; (800054c <main+0x40>)
 800052c:	f001 fa39 	bl	80019a2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x40>)
 8000534:	f001 fa35 	bl	80019a2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <main+0x40>)
 800053e:	f001 fa30 	bl	80019a2 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000546:	f000 fc37 	bl	8000db8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800054a:	e7ed      	b.n	8000528 <main+0x1c>
 800054c:	40020400 	.word	0x40020400

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fbb6 	bl	8003cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000574:	f001 fb78 	bl	8001c68 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <SystemClock_Config+0xc8>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xcc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <SystemClock_Config+0xcc>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c4:	2348      	movs	r3, #72	; 0x48
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005cc:	2303      	movs	r3, #3
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fb57 	bl	8001c88 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f96c 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fde5 	bl	80021d0 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800060c:	f000 f956 	bl	80008bc <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_ETH_Init+0x84>)
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <MX_ETH_Init+0x88>)
 8000628:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_ETH_Init+0x8c>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_ETH_Init+0x8c>)
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_ETH_Init+0x8c>)
 8000638:	22e1      	movs	r2, #225	; 0xe1
 800063a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_ETH_Init+0x8c>)
 800063e:	2200      	movs	r2, #0
 8000640:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_ETH_Init+0x8c>)
 8000644:	2200      	movs	r2, #0
 8000646:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_ETH_Init+0x8c>)
 800064a:	2200      	movs	r2, #0
 800064c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_ETH_Init+0x84>)
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <MX_ETH_Init+0x8c>)
 8000652:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_ETH_Init+0x84>)
 8000656:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800065a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ETH_Init+0x84>)
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <MX_ETH_Init+0x90>)
 8000660:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_ETH_Init+0x84>)
 8000664:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <MX_ETH_Init+0x94>)
 8000666:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_ETH_Init+0x84>)
 800066a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800066e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_ETH_Init+0x84>)
 8000672:	f000 fcab 	bl	8000fcc <HAL_ETH_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800067c:	f000 f91e 	bl	80008bc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000680:	2238      	movs	r2, #56	; 0x38
 8000682:	2100      	movs	r1, #0
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_ETH_Init+0x98>)
 8000686:	f003 fb23 	bl	8003cd0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_ETH_Init+0x98>)
 800068c:	2221      	movs	r2, #33	; 0x21
 800068e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_ETH_Init+0x98>)
 8000692:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000696:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_ETH_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200001a0 	.word	0x200001a0
 80006a8:	40028000 	.word	0x40028000
 80006ac:	200007e0 	.word	0x200007e0
 80006b0:	200000ac 	.word	0x200000ac
 80006b4:	2000000c 	.word	0x2000000c
 80006b8:	20000168 	.word	0x20000168

080006bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_USART3_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART3_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART3_UART_Init+0x58>)
 8000700:	f002 fb7c 	bl	8002dfc <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 f8d7 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000250 	.word	0x20000250
 8000718:	40004800 	.word	0x40004800

0800071c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000726:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2206      	movs	r2, #6
 800072c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2202      	movs	r2, #2
 8000732:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	2202      	movs	r2, #2
 800073e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000754:	2201      	movs	r2, #1
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000760:	f001 f939 	bl	80019d6 <HAL_PCD_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f8a7 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200002d8 	.word	0x200002d8

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b47      	ldr	r3, [pc, #284]	; (80008ac <MX_GPIO_Init+0x134>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a46      	ldr	r2, [pc, #280]	; (80008ac <MX_GPIO_Init+0x134>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b44      	ldr	r3, [pc, #272]	; (80008ac <MX_GPIO_Init+0x134>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_GPIO_Init+0x134>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a40      	ldr	r2, [pc, #256]	; (80008ac <MX_GPIO_Init+0x134>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <MX_GPIO_Init+0x134>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <MX_GPIO_Init+0x134>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a3a      	ldr	r2, [pc, #232]	; (80008ac <MX_GPIO_Init+0x134>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b38      	ldr	r3, [pc, #224]	; (80008ac <MX_GPIO_Init+0x134>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a34      	ldr	r2, [pc, #208]	; (80008ac <MX_GPIO_Init+0x134>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b32      	ldr	r3, [pc, #200]	; (80008ac <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2e      	ldr	r2, [pc, #184]	; (80008ac <MX_GPIO_Init+0x134>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a28      	ldr	r2, [pc, #160]	; (80008ac <MX_GPIO_Init+0x134>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f244 0181 	movw	r1, #16513	; 0x4081
 8000824:	4822      	ldr	r0, [pc, #136]	; (80008b0 <MX_GPIO_Init+0x138>)
 8000826:	f001 f8a3 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	4821      	ldr	r0, [pc, #132]	; (80008b4 <MX_GPIO_Init+0x13c>)
 8000830:	f001 f89e 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <MX_GPIO_Init+0x140>)
 800084c:	f000 fee4 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000850:	f244 0381 	movw	r3, #16513	; 0x4081
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_GPIO_Init+0x138>)
 800086a:	f000 fed5 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_GPIO_Init+0x13c>)
 8000886:	f000 fec7 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_GPIO_Init+0x13c>)
 800089e:	f000 febb 	bl	8001618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	; 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020400 	.word	0x40020400
 80008b4:	40021800 	.word	0x40021800
 80008b8:	40020800 	.word	0x40020800

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	; 0x38
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a4e      	ldr	r2, [pc, #312]	; (8000a68 <HAL_ETH_MspInit+0x158>)
 800092e:	4293      	cmp	r3, r2
 8000930:	f040 8096 	bne.w	8000a60 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000934:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a4c      	ldr	r2, [pc, #304]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 800093a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
 8000940:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a46      	ldr	r2, [pc, #280]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 8000952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
 8000958:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000960:	61fb      	str	r3, [r7, #28]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a40      	ldr	r2, [pc, #256]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 800096a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
 8000988:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
 80009b8:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c4:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a28      	ldr	r2, [pc, #160]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 80009ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <HAL_ETH_MspInit+0x15c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009dc:	2332      	movs	r3, #50	; 0x32
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ec:	230b      	movs	r3, #11
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	481e      	ldr	r0, [pc, #120]	; (8000a70 <HAL_ETH_MspInit+0x160>)
 80009f8:	f000 fe0e 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009fc:	2386      	movs	r3, #134	; 0x86
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4817      	ldr	r0, [pc, #92]	; (8000a74 <HAL_ETH_MspInit+0x164>)
 8000a18:	f000 fdfe 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <HAL_ETH_MspInit+0x168>)
 8000a3a:	f000 fded 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a50:	230b      	movs	r3, #11
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <HAL_ETH_MspInit+0x16c>)
 8000a5c:	f000 fddc 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40028000 	.word	0x40028000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40021800 	.word	0x40021800

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0aa      	sub	sp, #168	; 0xa8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	2284      	movs	r2, #132	; 0x84
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 f915 	bl	8003cd0 <memset>
  if(huart->Instance==USART3)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <HAL_UART_MspInit+0xb4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d13c      	bne.n	8000b2a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fdac 	bl	800261c <HAL_RCCEx_PeriphCLKConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aca:	f7ff fef7 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_UART_MspInit+0xbc>)
 8000b26:	f000 fd77 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	37a8      	adds	r7, #168	; 0xa8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40004800 	.word	0x40004800
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020c00 	.word	0x40020c00

08000b40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ac      	sub	sp, #176	; 0xb0
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	2284      	movs	r2, #132	; 0x84
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 f8b5 	bl	8003cd0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b6e:	d159      	bne.n	8000c24 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7c:	f107 0318 	add.w	r3, r7, #24
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fd4b 	bl	800261c <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000b8c:	f7ff fe96 	bl	80008bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ba8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bc2:	230a      	movs	r3, #10
 8000bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <HAL_PCD_MspInit+0xf0>)
 8000bd0:	f000 fd22 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bec:	4619      	mov	r1, r3
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_PCD_MspInit+0xf0>)
 8000bf0:	f000 fd12 	bl	8001618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfe:	6353      	str	r3, [r2, #52]	; 0x34
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c16:	6453      	str	r3, [r2, #68]	; 0x44
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	37b0      	adds	r7, #176	; 0xb0
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f87a 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd6:	f7ff ffd7 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f002 ffd5 	bl	8003c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fc15 	bl	800050c <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf0:	08003d20 	.word	0x08003d20
  ldr r2, =_sbss
 8000cf4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000cf8:	200007ec 	.word	0x200007ec

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>

08000cfe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 f92e 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 f805 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0e:	f7ff fddb 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f93b 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f911 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	200007e8 	.word	0x200007e8

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200007e8 	.word	0x200007e8

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <__NVIC_SetPriorityGrouping+0x40>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x40>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00
 8000e44:	05fa0000 	.word	0x05fa0000

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5c 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e06a      	b.n	80010b4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2223      	movs	r2, #35	; 0x23
 8000fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff fc8d 	bl	8000910 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b31      	ldr	r3, [pc, #196]	; (80010bc <HAL_ETH_Init+0xf0>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a30      	ldr	r2, [pc, #192]	; (80010bc <HAL_ETH_Init+0xf0>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <HAL_ETH_Init+0xf0>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_ETH_Init+0xf4>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <HAL_ETH_Init+0xf4>)
 8001014:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001018:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <HAL_ETH_Init+0xf4>)
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4927      	ldr	r1, [pc, #156]	; (80010c0 <HAL_ETH_Init+0xf4>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_ETH_Init+0xf4>)
 800102a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001042:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001044:	f7ff feac 	bl	8000da0 <HAL_GetTick>
 8001048:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800104a:	e011      	b.n	8001070 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800104c:	f7ff fea8 	bl	8000da0 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800105a:	d909      	bls.n	8001070 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2204      	movs	r2, #4
 8001060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	22e0      	movs	r2, #224	; 0xe0
 8001068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e021      	b.n	80010b4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1e4      	bne.n	800104c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f958 	bl	8001338 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f9ff 	bl	800148c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fa55 	bl	800153e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	461a      	mov	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f9bd 	bl	800141c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2210      	movs	r2, #16
 80010ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40013800 	.word	0x40013800

080010c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4b51      	ldr	r3, [pc, #324]	; (8001220 <ETH_SetMACConfig+0x15c>)
 80010da:	4013      	ands	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	7c1b      	ldrb	r3, [r3, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <ETH_SetMACConfig+0x28>
 80010e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010ea:	e000      	b.n	80010ee <ETH_SetMACConfig+0x2a>
 80010ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	7c5b      	ldrb	r3, [r3, #17]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <ETH_SetMACConfig+0x38>
 80010f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010fa:	e000      	b.n	80010fe <ETH_SetMACConfig+0x3a>
 80010fc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001104:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	7fdb      	ldrb	r3, [r3, #31]
 800110a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800110c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001112:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	7f92      	ldrb	r2, [r2, #30]
 8001118:	2a00      	cmp	r2, #0
 800111a:	d102      	bne.n	8001122 <ETH_SetMACConfig+0x5e>
 800111c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001120:	e000      	b.n	8001124 <ETH_SetMACConfig+0x60>
 8001122:	2200      	movs	r2, #0
                        macconf->Speed |
 8001124:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	7f1b      	ldrb	r3, [r3, #28]
 800112a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800112c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001132:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800113a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001142:	2a00      	cmp	r2, #0
 8001144:	d102      	bne.n	800114c <ETH_SetMACConfig+0x88>
 8001146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114a:	e000      	b.n	800114e <ETH_SetMACConfig+0x8a>
 800114c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800114e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	7bdb      	ldrb	r3, [r3, #15]
 8001154:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001156:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800115c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001164:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001166:	4313      	orrs	r3, r2
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff fe1a 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	f64f 7341 	movw	r3, #65345	; 0xff41
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	d101      	bne.n	80011b2 <ETH_SetMACConfig+0xee>
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	e000      	b.n	80011b4 <ETH_SetMACConfig+0xf0>
 80011b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80011c2:	2a01      	cmp	r2, #1
 80011c4:	d101      	bne.n	80011ca <ETH_SetMACConfig+0x106>
 80011c6:	2208      	movs	r2, #8
 80011c8:	e000      	b.n	80011cc <ETH_SetMACConfig+0x108>
 80011ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80011cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80011d4:	2a01      	cmp	r2, #1
 80011d6:	d101      	bne.n	80011dc <ETH_SetMACConfig+0x118>
 80011d8:	2204      	movs	r2, #4
 80011da:	e000      	b.n	80011de <ETH_SetMACConfig+0x11a>
 80011dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80011e6:	2a01      	cmp	r2, #1
 80011e8:	d101      	bne.n	80011ee <ETH_SetMACConfig+0x12a>
 80011ea:	2202      	movs	r2, #2
 80011ec:	e000      	b.n	80011f0 <ETH_SetMACConfig+0x12c>
 80011ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011f0:	4313      	orrs	r3, r2
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff fdd5 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	ff20810f 	.word	0xff20810f

08001224 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <ETH_SetDMAConfig+0x110>)
 800123e:	4013      	ands	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	7b1b      	ldrb	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <ETH_SetDMAConfig+0x2c>
 800124a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800124e:	e000      	b.n	8001252 <ETH_SetDMAConfig+0x2e>
 8001250:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	7b5b      	ldrb	r3, [r3, #13]
 8001256:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001258:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	7f52      	ldrb	r2, [r2, #29]
 800125e:	2a00      	cmp	r2, #0
 8001260:	d102      	bne.n	8001268 <ETH_SetDMAConfig+0x44>
 8001262:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001266:	e000      	b.n	800126a <ETH_SetDMAConfig+0x46>
 8001268:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800126a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	7b9b      	ldrb	r3, [r3, #14]
 8001270:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001272:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001278:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	7f1b      	ldrb	r3, [r3, #28]
 800127e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001280:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	7f9b      	ldrb	r3, [r3, #30]
 8001286:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001288:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800128e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001296:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001298:	4313      	orrs	r3, r2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012a8:	461a      	mov	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fd7c 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	791b      	ldrb	r3, [r3, #4]
 80012d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80012de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80012e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80012ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001306:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800130a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fd4d 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	f8de3f23 	.word	0xf8de3f23

08001338 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0a6      	sub	sp, #152	; 0x98
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001340:	2301      	movs	r3, #1
 8001342:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001346:	2301      	movs	r3, #1
 8001348:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001362:	2301      	movs	r3, #1
 8001364:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001374:	2300      	movs	r3, #0
 8001376:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800137e:	2300      	movs	r3, #0
 8001380:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800139a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80013a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80013ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013b0:	4619      	mov	r1, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fe86 	bl	80010c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80013bc:	2301      	movs	r3, #1
 80013be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80013ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff08 	bl	8001224 <ETH_SetDMAConfig>
}
 8001414:	bf00      	nop
 8001416:	3798      	adds	r7, #152	; 0x98
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3305      	adds	r3, #5
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	3204      	adds	r2, #4
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <ETH_MACAddressConfig+0x68>)
 800143e:	4413      	add	r3, r2
 8001440:	461a      	mov	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3303      	adds	r3, #3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	061a      	lsls	r2, r3, #24
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3302      	adds	r3, #2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3301      	adds	r3, #1
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	4313      	orrs	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	4313      	orrs	r3, r2
 8001468:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <ETH_MACAddressConfig+0x6c>)
 800146e:	4413      	add	r3, r2
 8001470:	461a      	mov	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	6013      	str	r3, [r2, #0]
}
 8001476:	bf00      	nop
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40028040 	.word	0x40028040
 8001488:	40028044 	.word	0x40028044

0800148c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	e03e      	b.n	8001518 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68d9      	ldr	r1, [r3, #12]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	3206      	adds	r2, #6
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d80c      	bhi.n	80014fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68d9      	ldr	r1, [r3, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	461a      	mov	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	e004      	b.n	8001506 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	461a      	mov	r2, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d9bd      	bls.n	800149a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001530:	611a      	str	r2, [r3, #16]
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e046      	b.n	80015da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6919      	ldr	r1, [r3, #16]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2200      	movs	r2, #0
 8001568:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001588:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001590:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	3212      	adds	r2, #18
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d80c      	bhi.n	80015ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6919      	ldr	r1, [r3, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	e004      	b.n	80015d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d9b5      	bls.n	800154c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160a:	60da      	str	r2, [r3, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e175      	b.n	8001924 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8164 	bne.w	800191e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_GPIO_Init+0x56>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d130      	bne.n	80016d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d017      	beq.n	800170c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d123      	bne.n	8001760 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	69b9      	ldr	r1, [r7, #24]
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80be 	beq.w	800191e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <HAL_GPIO_Init+0x324>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a65      	ldr	r2, [pc, #404]	; (800193c <HAL_GPIO_Init+0x324>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b63      	ldr	r3, [pc, #396]	; (800193c <HAL_GPIO_Init+0x324>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ba:	4a61      	ldr	r2, [pc, #388]	; (8001940 <HAL_GPIO_Init+0x328>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a58      	ldr	r2, [pc, #352]	; (8001944 <HAL_GPIO_Init+0x32c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d037      	beq.n	8001856 <HAL_GPIO_Init+0x23e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a57      	ldr	r2, [pc, #348]	; (8001948 <HAL_GPIO_Init+0x330>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_GPIO_Init+0x23a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a56      	ldr	r2, [pc, #344]	; (800194c <HAL_GPIO_Init+0x334>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d02b      	beq.n	800184e <HAL_GPIO_Init+0x236>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a55      	ldr	r2, [pc, #340]	; (8001950 <HAL_GPIO_Init+0x338>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x232>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a54      	ldr	r2, [pc, #336]	; (8001954 <HAL_GPIO_Init+0x33c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x22e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a53      	ldr	r2, [pc, #332]	; (8001958 <HAL_GPIO_Init+0x340>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x22a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a52      	ldr	r2, [pc, #328]	; (800195c <HAL_GPIO_Init+0x344>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x226>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a51      	ldr	r2, [pc, #324]	; (8001960 <HAL_GPIO_Init+0x348>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x222>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a50      	ldr	r2, [pc, #320]	; (8001964 <HAL_GPIO_Init+0x34c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x21e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4f      	ldr	r2, [pc, #316]	; (8001968 <HAL_GPIO_Init+0x350>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x21a>
 800182e:	2309      	movs	r3, #9
 8001830:	e012      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001832:	230a      	movs	r3, #10
 8001834:	e010      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001836:	2308      	movs	r3, #8
 8001838:	e00e      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800183a:	2307      	movs	r3, #7
 800183c:	e00c      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800183e:	2306      	movs	r3, #6
 8001840:	e00a      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001842:	2305      	movs	r3, #5
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001846:	2304      	movs	r3, #4
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001856:	2300      	movs	r3, #0
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	; (8001940 <HAL_GPIO_Init+0x328>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <HAL_GPIO_Init+0x354>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a34      	ldr	r2, [pc, #208]	; (800196c <HAL_GPIO_Init+0x354>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_GPIO_Init+0x354>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_GPIO_Init+0x354>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ca:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_GPIO_Init+0x354>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ee:	4a1f      	ldr	r2, [pc, #124]	; (800196c <HAL_GPIO_Init+0x354>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_GPIO_Init+0x354>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_GPIO_Init+0x354>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	f67f ae86 	bls.w	8001638 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40013800 	.word	0x40013800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40020800 	.word	0x40020800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40021000 	.word	0x40021000
 8001958:	40021400 	.word	0x40021400
 800195c:	40021800 	.word	0x40021800
 8001960:	40021c00 	.word	0x40021c00
 8001964:	40022000 	.word	0x40022000
 8001968:	40022400 	.word	0x40022400
 800196c:	40013c00 	.word	0x40013c00

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	041a      	lsls	r2, r3, #16
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43d9      	mvns	r1, r3
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	400b      	ands	r3, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d8:	b08f      	sub	sp, #60	; 0x3c
 80019da:	af0a      	add	r7, sp, #40	; 0x28
 80019dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e116      	b.n	8001c16 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff f89c 	bl	8000b40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 fe92 	bl	8003750 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	687e      	ldr	r6, [r7, #4]
 8001a34:	466d      	mov	r5, sp
 8001a36:	f106 0410 	add.w	r4, r6, #16
 8001a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a4a:	1d33      	adds	r3, r6, #4
 8001a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4e:	6838      	ldr	r0, [r7, #0]
 8001a50:	f001 fe26 	bl	80036a0 <USB_CoreInit>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0d7      	b.n	8001c16 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fe80 	bl	8003772 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e04a      	b.n	8001b0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	333d      	adds	r3, #61	; 0x3d
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	333c      	adds	r3, #60	; 0x3c
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	b298      	uxth	r0, r3
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3344      	adds	r3, #68	; 0x44
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3340      	adds	r3, #64	; 0x40
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	3348      	adds	r3, #72	; 0x48
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	334c      	adds	r3, #76	; 0x4c
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3354      	adds	r3, #84	; 0x54
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d3af      	bcc.n	8001a78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e044      	b.n	8001ba8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d3b5      	bcc.n	8001b1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	687e      	ldr	r6, [r7, #4]
 8001bba:	466d      	mov	r5, sp
 8001bbc:	f106 0410 	add.w	r4, r6, #16
 8001bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bd0:	1d33      	adds	r3, r6, #4
 8001bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd4:	6838      	ldr	r0, [r7, #0]
 8001bd6:	f001 fe19 	bl	800380c <USB_DevInit>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e014      	b.n	8001c16 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f80b 	bl	8001c20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 ffd7 	bl	8003bc2 <USB_DevDisconnect>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_PCDEx_ActivateLPM+0x44>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	10000003 	.word	0x10000003

08001c68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40007000 	.word	0x40007000

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e291      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8087 	beq.w	8001dba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cac:	4b96      	ldr	r3, [pc, #600]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb8:	4b93      	ldr	r3, [pc, #588]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d112      	bne.n	8001cea <HAL_RCC_OscConfig+0x62>
 8001cc4:	4b90      	ldr	r3, [pc, #576]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b8d      	ldr	r3, [pc, #564]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d06c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x130>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d168      	bne.n	8001db8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e26b      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x7a>
 8001cf4:	4b84      	ldr	r3, [pc, #528]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a83      	ldr	r2, [pc, #524]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e02e      	b.n	8001d60 <HAL_RCC_OscConfig+0xd8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x9c>
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7e      	ldr	r2, [pc, #504]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7b      	ldr	r2, [pc, #492]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xd8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0xc0>
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a75      	ldr	r2, [pc, #468]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a72      	ldr	r2, [pc, #456]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xd8>
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a6b      	ldr	r2, [pc, #428]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f81a 	bl	8000da0 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff f816 	bl	8000da0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e21f      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xe8>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff f806 	bl	8000da0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff f802 	bl	8000da0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e20b      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b57      	ldr	r3, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x110>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d069      	beq.n	8001e9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd2:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d11c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x190>
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e1df      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	493d      	ldr	r1, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	e040      	b.n	8001e9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d023      	beq.n	8001e68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e20:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ffb8 	bl	8000da0 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7fe ffb4 	bl	8000da0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1bd      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4929      	ldr	r1, [pc, #164]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7fe ff94 	bl	8000da0 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7fe ff90 	bl	8000da0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e199      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d038      	beq.n	8001f18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7fe ff71 	bl	8000da0 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7fe ff6d 	bl	8000da0 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e176      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x23a>
 8001ee0:	e01a      	b.n	8001f18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7fe ff57 	bl	8000da0 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7fe ff53 	bl	8000da0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d903      	bls.n	8001f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e15c      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
 8001f08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	4b91      	ldr	r3, [pc, #580]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ee      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a4 	beq.w	800206e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10d      	bne.n	8001f4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a87      	ldr	r2, [pc, #540]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b85      	ldr	r3, [pc, #532]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4e:	4b82      	ldr	r3, [pc, #520]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d118      	bne.n	8001f8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7e      	ldr	r2, [pc, #504]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7fe ff1b 	bl	8000da0 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6e:	f7fe ff17 	bl	8000da0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e120      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f80:	4b75      	ldr	r3, [pc, #468]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x31a>
 8001f94:	4b6f      	ldr	r3, [pc, #444]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a6e      	ldr	r2, [pc, #440]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	e02d      	b.n	8001ffe <HAL_RCC_OscConfig+0x376>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x33c>
 8001faa:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	4a69      	ldr	r2, [pc, #420]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	4a66      	ldr	r2, [pc, #408]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc2:	e01c      	b.n	8001ffe <HAL_RCC_OscConfig+0x376>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d10c      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x35e>
 8001fcc:	4b61      	ldr	r3, [pc, #388]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a60      	ldr	r2, [pc, #384]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	4a5d      	ldr	r2, [pc, #372]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe4:	e00b      	b.n	8001ffe <HAL_RCC_OscConfig+0x376>
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a5a      	ldr	r2, [pc, #360]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a57      	ldr	r2, [pc, #348]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d015      	beq.n	8002032 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7fe fecb 	bl	8000da0 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fec7 	bl	8000da0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0ce      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	4b4b      	ldr	r3, [pc, #300]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ee      	beq.n	800200e <HAL_RCC_OscConfig+0x386>
 8002030:	e014      	b.n	800205c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7fe feb5 	bl	8000da0 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe feb1 	bl	8000da0 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	4b40      	ldr	r3, [pc, #256]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ee      	bne.n	800203a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d105      	bne.n	800206e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002062:	4b3c      	ldr	r3, [pc, #240]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a3b      	ldr	r2, [pc, #236]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80a4 	beq.w	80021c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002078:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d06b      	beq.n	800215c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d149      	bne.n	8002120 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208c:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a30      	ldr	r2, [pc, #192]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe fe82 	bl	8000da0 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe fe7e 	bl	8000da0 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e087      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	3b01      	subs	r3, #1
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	061b      	lsls	r3, r3, #24
 80020e2:	4313      	orrs	r3, r2
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe52 	bl	8000da0 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fe4e 	bl	8000da0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e057      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x478>
 800211e:	e04f      	b.n	80021c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800212a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe fe38 	bl	8000da0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fe34 	bl	8000da0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e03d      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x4ac>
 8002152:	e035      	b.n	80021c0 <HAL_RCC_OscConfig+0x538>
 8002154:	40023800 	.word	0x40023800
 8002158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x544>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d028      	beq.n	80021bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d121      	bne.n	80021bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d11a      	bne.n	80021bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002192:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002194:	4293      	cmp	r3, r2
 8002196:	d111      	bne.n	80021bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	3b01      	subs	r3, #1
 80021a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800

080021d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0d0      	b.n	800238a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d910      	bls.n	8002218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 020f 	bic.w	r2, r3, #15
 80021fe:	4965      	ldr	r1, [pc, #404]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b8      	b.n	800238a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 800224e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	494d      	ldr	r1, [pc, #308]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d040      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d115      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e07f      	b.n	800238a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e073      	b.n	800238a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06b      	b.n	800238a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4936      	ldr	r1, [pc, #216]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe fd6c 	bl	8000da0 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fd68 	bl	8000da0 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e053      	b.n	800238a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d210      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 020f 	bic.w	r2, r3, #15
 800230a:	4922      	ldr	r1, [pc, #136]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e032      	b.n	800238a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4916      	ldr	r1, [pc, #88]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002362:	f000 f821 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490a      	ldr	r1, [pc, #40]	; (800239c <HAL_RCC_ClockConfig+0x1cc>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1d0>)
 800237c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fcc8 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00
 8002398:	40023800 	.word	0x40023800
 800239c:	08003cf8 	.word	0x08003cf8
 80023a0:	20000000 	.word	0x20000000
 80023a4:	20000004 	.word	0x20000004

080023a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ac:	b094      	sub	sp, #80	; 0x50
 80023ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	647b      	str	r3, [r7, #68]	; 0x44
 80023b4:	2300      	movs	r3, #0
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b8:	2300      	movs	r3, #0
 80023ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c0:	4b79      	ldr	r3, [pc, #484]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d00d      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x40>
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	f200 80e1 	bhi.w	8002594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x34>
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d003      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023da:	e0db      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b73      	ldr	r3, [pc, #460]	; (80025ac <HAL_RCC_GetSysClockFreq+0x204>)
 80023de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023e0:	e0db      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023e2:	4b73      	ldr	r3, [pc, #460]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80023e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023e6:	e0d8      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fe:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	099b      	lsrs	r3, r3, #6
 8002404:	2200      	movs	r2, #0
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
 8002408:	63fa      	str	r2, [r7, #60]	; 0x3c
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
 8002416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800241a:	4622      	mov	r2, r4
 800241c:	462b      	mov	r3, r5
 800241e:	f04f 0000 	mov.w	r0, #0
 8002422:	f04f 0100 	mov.w	r1, #0
 8002426:	0159      	lsls	r1, r3, #5
 8002428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800242c:	0150      	lsls	r0, r2, #5
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4621      	mov	r1, r4
 8002434:	1a51      	subs	r1, r2, r1
 8002436:	6139      	str	r1, [r7, #16]
 8002438:	4629      	mov	r1, r5
 800243a:	eb63 0301 	sbc.w	r3, r3, r1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800244c:	4659      	mov	r1, fp
 800244e:	018b      	lsls	r3, r1, #6
 8002450:	4651      	mov	r1, sl
 8002452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002456:	4651      	mov	r1, sl
 8002458:	018a      	lsls	r2, r1, #6
 800245a:	4651      	mov	r1, sl
 800245c:	ebb2 0801 	subs.w	r8, r2, r1
 8002460:	4659      	mov	r1, fp
 8002462:	eb63 0901 	sbc.w	r9, r3, r1
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800247a:	4690      	mov	r8, r2
 800247c:	4699      	mov	r9, r3
 800247e:	4623      	mov	r3, r4
 8002480:	eb18 0303 	adds.w	r3, r8, r3
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	462b      	mov	r3, r5
 8002488:	eb49 0303 	adc.w	r3, r9, r3
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800249a:	4629      	mov	r1, r5
 800249c:	024b      	lsls	r3, r1, #9
 800249e:	4621      	mov	r1, r4
 80024a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024a4:	4621      	mov	r1, r4
 80024a6:	024a      	lsls	r2, r1, #9
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ae:	2200      	movs	r2, #0
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024b8:	f7fd fea6 	bl	8000208 <__aeabi_uldivmod>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4613      	mov	r3, r2
 80024c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c4:	e058      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	2200      	movs	r2, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	4611      	mov	r1, r2
 80024d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024e0:	4642      	mov	r2, r8
 80024e2:	464b      	mov	r3, r9
 80024e4:	f04f 0000 	mov.w	r0, #0
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	0159      	lsls	r1, r3, #5
 80024ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f2:	0150      	lsls	r0, r2, #5
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4641      	mov	r1, r8
 80024fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80024fe:	4649      	mov	r1, r9
 8002500:	eb63 0b01 	sbc.w	fp, r3, r1
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002518:	ebb2 040a 	subs.w	r4, r2, sl
 800251c:	eb63 050b 	sbc.w	r5, r3, fp
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	00eb      	lsls	r3, r5, #3
 800252a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800252e:	00e2      	lsls	r2, r4, #3
 8002530:	4614      	mov	r4, r2
 8002532:	461d      	mov	r5, r3
 8002534:	4643      	mov	r3, r8
 8002536:	18e3      	adds	r3, r4, r3
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	464b      	mov	r3, r9
 800253c:	eb45 0303 	adc.w	r3, r5, r3
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800254e:	4629      	mov	r1, r5
 8002550:	028b      	lsls	r3, r1, #10
 8002552:	4621      	mov	r1, r4
 8002554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002558:	4621      	mov	r1, r4
 800255a:	028a      	lsls	r2, r1, #10
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002562:	2200      	movs	r2, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	61fa      	str	r2, [r7, #28]
 8002568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800256c:	f7fd fe4c 	bl	8000208 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4613      	mov	r3, r2
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	3301      	adds	r3, #1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800258a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002592:	e002      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002596:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800259c:	4618      	mov	r0, r3
 800259e:	3750      	adds	r7, #80	; 0x50
 80025a0:	46bd      	mov	sp, r7
 80025a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	007a1200 	.word	0x007a1200

080025b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0a9b      	lsrs	r3, r3, #10
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	08003d08 	.word	0x08003d08

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f8:	f7ff ffdc 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0b5b      	lsrs	r3, r3, #13
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	08003d08 	.word	0x08003d08

0800261c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d012      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002644:	4b69      	ldr	r3, [pc, #420]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a68      	ldr	r2, [pc, #416]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800264e:	6093      	str	r3, [r2, #8]
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	4964      	ldr	r1, [pc, #400]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002666:	2301      	movs	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d017      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002676:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800267c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	4959      	ldr	r1, [pc, #356]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002694:	d101      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002696:	2301      	movs	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d017      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026b2:	4b4e      	ldr	r3, [pc, #312]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	494a      	ldr	r1, [pc, #296]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 808b 	beq.w	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a39      	ldr	r2, [pc, #228]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
 800270c:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002718:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a34      	ldr	r2, [pc, #208]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002724:	f7fe fb3c 	bl	8000da0 <HAL_GetTick>
 8002728:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7fe fb38 	bl	8000da0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e357      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002752:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d035      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d02e      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002788:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800278a:	4a18      	ldr	r2, [pc, #96]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d114      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fb00 	bl	8000da0 <HAL_GetTick>
 80027a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fafc 	bl	8000da0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e319      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ee      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027d2:	d111      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027e2:	400b      	ands	r3, r1
 80027e4:	4901      	ldr	r1, [pc, #4]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
 80027ea:	e00b      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40007000 	.word	0x40007000
 80027f4:	0ffffcff 	.word	0x0ffffcff
 80027f8:	4baa      	ldr	r3, [pc, #680]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4aa9      	ldr	r2, [pc, #676]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002802:	6093      	str	r3, [r2, #8]
 8002804:	4ba7      	ldr	r3, [pc, #668]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002806:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	49a4      	ldr	r1, [pc, #656]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002812:	4313      	orrs	r3, r2
 8002814:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002822:	4ba0      	ldr	r3, [pc, #640]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002828:	4a9e      	ldr	r2, [pc, #632]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002832:	4b9c      	ldr	r3, [pc, #624]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002834:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	4999      	ldr	r1, [pc, #612]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002850:	4b94      	ldr	r3, [pc, #592]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285e:	4991      	ldr	r1, [pc, #580]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002872:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002880:	4988      	ldr	r1, [pc, #544]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002894:	4b83      	ldr	r3, [pc, #524]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a2:	4980      	ldr	r1, [pc, #512]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b6:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c4:	4977      	ldr	r1, [pc, #476]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d8:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	496f      	ldr	r1, [pc, #444]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028fa:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	f023 020c 	bic.w	r2, r3, #12
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002908:	4966      	ldr	r1, [pc, #408]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	495e      	ldr	r1, [pc, #376]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800293e:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002944:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	4955      	ldr	r1, [pc, #340]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	494d      	ldr	r1, [pc, #308]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002982:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	4944      	ldr	r1, [pc, #272]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	493c      	ldr	r1, [pc, #240]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d4:	4933      	ldr	r1, [pc, #204]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029e8:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f6:	492b      	ldr	r1, [pc, #172]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d011      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a18:	4922      	ldr	r1, [pc, #136]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a28:	d101      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	4912      	ldr	r1, [pc, #72]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d006      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80d9 	beq.w	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a01      	ldr	r2, [pc, #4]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002aa2:	e001      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aaa:	f7fe f979 	bl	8000da0 <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ab2:	f7fe f975 	bl	8000da0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	; 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e194      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ac4:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d021      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d11d      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002af2:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af8:	0e1b      	lsrs	r3, r3, #24
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	019a      	lsls	r2, r3, #6
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	071b      	lsls	r3, r3, #28
 8002b18:	4957      	ldr	r1, [pc, #348]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d004      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d02e      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b4a:	d129      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b4c:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b60:	0f1b      	lsrs	r3, r3, #28
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	019a      	lsls	r2, r3, #6
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	071b      	lsls	r3, r3, #28
 8002b80:	493d      	ldr	r1, [pc, #244]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b8e:	f023 021f 	bic.w	r2, r3, #31
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	3b01      	subs	r3, #1
 8002b98:	4937      	ldr	r1, [pc, #220]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01d      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bac:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb2:	0e1b      	lsrs	r3, r3, #24
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bba:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc0:	0f1b      	lsrs	r3, r3, #28
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	019a      	lsls	r2, r3, #6
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	071b      	lsls	r3, r3, #28
 8002be0:	4925      	ldr	r1, [pc, #148]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d011      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	019a      	lsls	r2, r3, #6
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	071b      	lsls	r3, r3, #28
 8002c10:	4919      	ldr	r1, [pc, #100]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c18:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe f8bc 	bl	8000da0 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c2c:	f7fe f8b8 	bl	8000da0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0d7      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 80cd 	bne.w	8002dec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5e:	f7fe f89f 	bl	8000da0 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c66:	f7fe f89b 	bl	8000da0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b64      	cmp	r3, #100	; 0x64
 8002c72:	d903      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0ba      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c7c:	4b5e      	ldr	r3, [pc, #376]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c88:	d0ed      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d02e      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d12a      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cb2:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cc0:	4b4d      	ldr	r3, [pc, #308]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	0f1b      	lsrs	r3, r3, #28
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	019a      	lsls	r2, r3, #6
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	071b      	lsls	r3, r3, #28
 8002ce6:	4944      	ldr	r1, [pc, #272]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cee:	4b42      	ldr	r3, [pc, #264]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	493d      	ldr	r1, [pc, #244]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d022      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d1c:	d11d      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d1e:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	0e1b      	lsrs	r3, r3, #24
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d2c:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	0f1b      	lsrs	r3, r3, #28
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	019a      	lsls	r2, r3, #6
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	071b      	lsls	r3, r3, #28
 8002d52:	4929      	ldr	r1, [pc, #164]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d028      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	0e1b      	lsrs	r3, r3, #24
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d74:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	019a      	lsls	r2, r3, #6
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	4917      	ldr	r1, [pc, #92]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	4911      	ldr	r1, [pc, #68]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fd ffec 	bl	8000da0 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dcc:	f7fd ffe8 	bl	8000da0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e007      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dea:	d1ef      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e040      	b.n	8002e90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd fe2e 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	; 0x24
 8002e28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f82c 	bl	8002e98 <UART_SetConfig>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e022      	b.n	8002e90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa84 	bl	8003360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fb0b 	bl	80034a4 <UART_CheckIdleState>
 8002e8e:	4603      	mov	r3, r0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4ba6      	ldr	r3, [pc, #664]	; (800315c <UART_SetConfig+0x2c4>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a94      	ldr	r2, [pc, #592]	; (8003160 <UART_SetConfig+0x2c8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d120      	bne.n	8002f56 <UART_SetConfig+0xbe>
 8002f14:	4b93      	ldr	r3, [pc, #588]	; (8003164 <UART_SetConfig+0x2cc>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d816      	bhi.n	8002f50 <UART_SetConfig+0xb8>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <UART_SetConfig+0x90>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f45 	.word	0x08002f45
 8002f30:	08002f3f 	.word	0x08002f3f
 8002f34:	08002f4b 	.word	0x08002f4b
 8002f38:	2301      	movs	r3, #1
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e150      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e14d      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f44:	2304      	movs	r3, #4
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e14a      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e147      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f50:	2310      	movs	r3, #16
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e144      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a83      	ldr	r2, [pc, #524]	; (8003168 <UART_SetConfig+0x2d0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d132      	bne.n	8002fc6 <UART_SetConfig+0x12e>
 8002f60:	4b80      	ldr	r3, [pc, #512]	; (8003164 <UART_SetConfig+0x2cc>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d828      	bhi.n	8002fc0 <UART_SetConfig+0x128>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <UART_SetConfig+0xdc>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fc1 	.word	0x08002fc1
 8002f7c:	08002fc1 	.word	0x08002fc1
 8002f80:	08002fc1 	.word	0x08002fc1
 8002f84:	08002fb5 	.word	0x08002fb5
 8002f88:	08002fc1 	.word	0x08002fc1
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fc1 	.word	0x08002fc1
 8002f94:	08002faf 	.word	0x08002faf
 8002f98:	08002fc1 	.word	0x08002fc1
 8002f9c:	08002fc1 	.word	0x08002fc1
 8002fa0:	08002fc1 	.word	0x08002fc1
 8002fa4:	08002fbb 	.word	0x08002fbb
 8002fa8:	2300      	movs	r3, #0
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e118      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e115      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e112      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e10f      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e10c      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a68      	ldr	r2, [pc, #416]	; (800316c <UART_SetConfig+0x2d4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d120      	bne.n	8003012 <UART_SetConfig+0x17a>
 8002fd0:	4b64      	ldr	r3, [pc, #400]	; (8003164 <UART_SetConfig+0x2cc>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fda:	2b30      	cmp	r3, #48	; 0x30
 8002fdc:	d013      	beq.n	8003006 <UART_SetConfig+0x16e>
 8002fde:	2b30      	cmp	r3, #48	; 0x30
 8002fe0:	d814      	bhi.n	800300c <UART_SetConfig+0x174>
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d009      	beq.n	8002ffa <UART_SetConfig+0x162>
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d810      	bhi.n	800300c <UART_SetConfig+0x174>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <UART_SetConfig+0x15c>
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d006      	beq.n	8003000 <UART_SetConfig+0x168>
 8002ff2:	e00b      	b.n	800300c <UART_SetConfig+0x174>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e0f2      	b.n	80031e0 <UART_SetConfig+0x348>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e0ef      	b.n	80031e0 <UART_SetConfig+0x348>
 8003000:	2304      	movs	r3, #4
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e0ec      	b.n	80031e0 <UART_SetConfig+0x348>
 8003006:	2308      	movs	r3, #8
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e0e9      	b.n	80031e0 <UART_SetConfig+0x348>
 800300c:	2310      	movs	r3, #16
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e0e6      	b.n	80031e0 <UART_SetConfig+0x348>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a56      	ldr	r2, [pc, #344]	; (8003170 <UART_SetConfig+0x2d8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d120      	bne.n	800305e <UART_SetConfig+0x1c6>
 800301c:	4b51      	ldr	r3, [pc, #324]	; (8003164 <UART_SetConfig+0x2cc>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003026:	2bc0      	cmp	r3, #192	; 0xc0
 8003028:	d013      	beq.n	8003052 <UART_SetConfig+0x1ba>
 800302a:	2bc0      	cmp	r3, #192	; 0xc0
 800302c:	d814      	bhi.n	8003058 <UART_SetConfig+0x1c0>
 800302e:	2b80      	cmp	r3, #128	; 0x80
 8003030:	d009      	beq.n	8003046 <UART_SetConfig+0x1ae>
 8003032:	2b80      	cmp	r3, #128	; 0x80
 8003034:	d810      	bhi.n	8003058 <UART_SetConfig+0x1c0>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <UART_SetConfig+0x1a8>
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d006      	beq.n	800304c <UART_SetConfig+0x1b4>
 800303e:	e00b      	b.n	8003058 <UART_SetConfig+0x1c0>
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e0cc      	b.n	80031e0 <UART_SetConfig+0x348>
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e0c9      	b.n	80031e0 <UART_SetConfig+0x348>
 800304c:	2304      	movs	r3, #4
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e0c6      	b.n	80031e0 <UART_SetConfig+0x348>
 8003052:	2308      	movs	r3, #8
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e0c3      	b.n	80031e0 <UART_SetConfig+0x348>
 8003058:	2310      	movs	r3, #16
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e0c0      	b.n	80031e0 <UART_SetConfig+0x348>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a44      	ldr	r2, [pc, #272]	; (8003174 <UART_SetConfig+0x2dc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d125      	bne.n	80030b4 <UART_SetConfig+0x21c>
 8003068:	4b3e      	ldr	r3, [pc, #248]	; (8003164 <UART_SetConfig+0x2cc>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003076:	d017      	beq.n	80030a8 <UART_SetConfig+0x210>
 8003078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307c:	d817      	bhi.n	80030ae <UART_SetConfig+0x216>
 800307e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003082:	d00b      	beq.n	800309c <UART_SetConfig+0x204>
 8003084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003088:	d811      	bhi.n	80030ae <UART_SetConfig+0x216>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <UART_SetConfig+0x1fe>
 800308e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003092:	d006      	beq.n	80030a2 <UART_SetConfig+0x20a>
 8003094:	e00b      	b.n	80030ae <UART_SetConfig+0x216>
 8003096:	2300      	movs	r3, #0
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e0a1      	b.n	80031e0 <UART_SetConfig+0x348>
 800309c:	2302      	movs	r3, #2
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e09e      	b.n	80031e0 <UART_SetConfig+0x348>
 80030a2:	2304      	movs	r3, #4
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e09b      	b.n	80031e0 <UART_SetConfig+0x348>
 80030a8:	2308      	movs	r3, #8
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e098      	b.n	80031e0 <UART_SetConfig+0x348>
 80030ae:	2310      	movs	r3, #16
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e095      	b.n	80031e0 <UART_SetConfig+0x348>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2f      	ldr	r2, [pc, #188]	; (8003178 <UART_SetConfig+0x2e0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d125      	bne.n	800310a <UART_SetConfig+0x272>
 80030be:	4b29      	ldr	r3, [pc, #164]	; (8003164 <UART_SetConfig+0x2cc>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030cc:	d017      	beq.n	80030fe <UART_SetConfig+0x266>
 80030ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030d2:	d817      	bhi.n	8003104 <UART_SetConfig+0x26c>
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d8:	d00b      	beq.n	80030f2 <UART_SetConfig+0x25a>
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	d811      	bhi.n	8003104 <UART_SetConfig+0x26c>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <UART_SetConfig+0x254>
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e8:	d006      	beq.n	80030f8 <UART_SetConfig+0x260>
 80030ea:	e00b      	b.n	8003104 <UART_SetConfig+0x26c>
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e076      	b.n	80031e0 <UART_SetConfig+0x348>
 80030f2:	2302      	movs	r3, #2
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e073      	b.n	80031e0 <UART_SetConfig+0x348>
 80030f8:	2304      	movs	r3, #4
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e070      	b.n	80031e0 <UART_SetConfig+0x348>
 80030fe:	2308      	movs	r3, #8
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e06d      	b.n	80031e0 <UART_SetConfig+0x348>
 8003104:	2310      	movs	r3, #16
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e06a      	b.n	80031e0 <UART_SetConfig+0x348>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1b      	ldr	r2, [pc, #108]	; (800317c <UART_SetConfig+0x2e4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d138      	bne.n	8003186 <UART_SetConfig+0x2ee>
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <UART_SetConfig+0x2cc>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800311e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003122:	d017      	beq.n	8003154 <UART_SetConfig+0x2bc>
 8003124:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003128:	d82a      	bhi.n	8003180 <UART_SetConfig+0x2e8>
 800312a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312e:	d00b      	beq.n	8003148 <UART_SetConfig+0x2b0>
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003134:	d824      	bhi.n	8003180 <UART_SetConfig+0x2e8>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <UART_SetConfig+0x2aa>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313e:	d006      	beq.n	800314e <UART_SetConfig+0x2b6>
 8003140:	e01e      	b.n	8003180 <UART_SetConfig+0x2e8>
 8003142:	2300      	movs	r3, #0
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e04b      	b.n	80031e0 <UART_SetConfig+0x348>
 8003148:	2302      	movs	r3, #2
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e048      	b.n	80031e0 <UART_SetConfig+0x348>
 800314e:	2304      	movs	r3, #4
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e045      	b.n	80031e0 <UART_SetConfig+0x348>
 8003154:	2308      	movs	r3, #8
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e042      	b.n	80031e0 <UART_SetConfig+0x348>
 800315a:	bf00      	nop
 800315c:	efff69f3 	.word	0xefff69f3
 8003160:	40011000 	.word	0x40011000
 8003164:	40023800 	.word	0x40023800
 8003168:	40004400 	.word	0x40004400
 800316c:	40004800 	.word	0x40004800
 8003170:	40004c00 	.word	0x40004c00
 8003174:	40005000 	.word	0x40005000
 8003178:	40011400 	.word	0x40011400
 800317c:	40007800 	.word	0x40007800
 8003180:	2310      	movs	r3, #16
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e02c      	b.n	80031e0 <UART_SetConfig+0x348>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a72      	ldr	r2, [pc, #456]	; (8003354 <UART_SetConfig+0x4bc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d125      	bne.n	80031dc <UART_SetConfig+0x344>
 8003190:	4b71      	ldr	r3, [pc, #452]	; (8003358 <UART_SetConfig+0x4c0>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800319a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800319e:	d017      	beq.n	80031d0 <UART_SetConfig+0x338>
 80031a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031a4:	d817      	bhi.n	80031d6 <UART_SetConfig+0x33e>
 80031a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031aa:	d00b      	beq.n	80031c4 <UART_SetConfig+0x32c>
 80031ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b0:	d811      	bhi.n	80031d6 <UART_SetConfig+0x33e>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <UART_SetConfig+0x326>
 80031b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ba:	d006      	beq.n	80031ca <UART_SetConfig+0x332>
 80031bc:	e00b      	b.n	80031d6 <UART_SetConfig+0x33e>
 80031be:	2300      	movs	r3, #0
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e00d      	b.n	80031e0 <UART_SetConfig+0x348>
 80031c4:	2302      	movs	r3, #2
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e00a      	b.n	80031e0 <UART_SetConfig+0x348>
 80031ca:	2304      	movs	r3, #4
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e007      	b.n	80031e0 <UART_SetConfig+0x348>
 80031d0:	2308      	movs	r3, #8
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e004      	b.n	80031e0 <UART_SetConfig+0x348>
 80031d6:	2310      	movs	r3, #16
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e001      	b.n	80031e0 <UART_SetConfig+0x348>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e8:	d15b      	bne.n	80032a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d828      	bhi.n	8003242 <UART_SetConfig+0x3aa>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <UART_SetConfig+0x360>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003225 	.word	0x08003225
 8003200:	0800322d 	.word	0x0800322d
 8003204:	08003243 	.word	0x08003243
 8003208:	08003233 	.word	0x08003233
 800320c:	08003243 	.word	0x08003243
 8003210:	08003243 	.word	0x08003243
 8003214:	08003243 	.word	0x08003243
 8003218:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7ff f9d6 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e013      	b.n	800324c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7ff f9e6 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8003228:	61b8      	str	r0, [r7, #24]
        break;
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800322c:	4b4b      	ldr	r3, [pc, #300]	; (800335c <UART_SetConfig+0x4c4>)
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e00c      	b.n	800324c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003232:	f7ff f8b9 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8003236:	61b8      	str	r0, [r7, #24]
        break;
 8003238:	e008      	b.n	800324c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e004      	b.n	800324c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77bb      	strb	r3, [r7, #30]
        break;
 800324a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d074      	beq.n	800333c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	005a      	lsls	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	d916      	bls.n	800329c <UART_SetConfig+0x404>
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d212      	bcs.n	800329c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	b29b      	uxth	r3, r3
 800327a:	f023 030f 	bic.w	r3, r3, #15
 800327e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	b29b      	uxth	r3, r3
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	b29a      	uxth	r2, r3
 800328c:	89fb      	ldrh	r3, [r7, #14]
 800328e:	4313      	orrs	r3, r2
 8003290:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	89fa      	ldrh	r2, [r7, #14]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e04f      	b.n	800333c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	77bb      	strb	r3, [r7, #30]
 80032a0:	e04c      	b.n	800333c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d828      	bhi.n	80032fa <UART_SetConfig+0x462>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <UART_SetConfig+0x418>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032dd 	.word	0x080032dd
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032fb 	.word	0x080032fb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7ff f97a 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 80032d8:	61b8      	str	r0, [r7, #24]
        break;
 80032da:	e013      	b.n	8003304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7ff f98a 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 80032e0:	61b8      	str	r0, [r7, #24]
        break;
 80032e2:	e00f      	b.n	8003304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <UART_SetConfig+0x4c4>)
 80032e6:	61bb      	str	r3, [r7, #24]
        break;
 80032e8:	e00c      	b.n	8003304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7ff f85d 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 80032ee:	61b8      	str	r0, [r7, #24]
        break;
 80032f0:	e008      	b.n	8003304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e004      	b.n	8003304 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	77bb      	strb	r3, [r7, #30]
        break;
 8003302:	bf00      	nop
    }

    if (pclk != 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	085a      	lsrs	r2, r3, #1
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d909      	bls.n	8003338 <UART_SetConfig+0x4a0>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d205      	bcs.n	8003338 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e001      	b.n	800333c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003348:	7fbb      	ldrb	r3, [r7, #30]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40007c00 	.word	0x40007c00
 8003358:	40023800 	.word	0x40023800
 800335c:	00f42400 	.word	0x00f42400

08003360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01a      	beq.n	8003476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345e:	d10a      	bne.n	8003476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b4:	f7fd fc74 	bl	8000da0 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d10e      	bne.n	80034e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f81b 	bl	8003512 <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e011      	b.n	800350a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b09c      	sub	sp, #112	; 0x70
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003522:	e0a7      	b.n	8003674 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	f000 80a3 	beq.w	8003674 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fd fc37 	bl	8000da0 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <UART_WaitOnFlagUntilTimeout+0x32>
 800353e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003540:	2b00      	cmp	r3, #0
 8003542:	d13f      	bne.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003558:	667b      	str	r3, [r7, #100]	; 0x64
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003564:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e6      	bne.n	8003544 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3308      	adds	r3, #8
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	663b      	str	r3, [r7, #96]	; 0x60
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3308      	adds	r3, #8
 8003594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003596:	64ba      	str	r2, [r7, #72]	; 0x48
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800359c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e068      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d050      	beq.n	8003674 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e0:	d148      	bne.n	8003674 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
 800360c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e6      	bne.n	80035ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3308      	adds	r3, #8
 8003624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	66bb      	str	r3, [r7, #104]	; 0x68
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800363e:	623a      	str	r2, [r7, #32]
 8003640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	61bb      	str	r3, [r7, #24]
   return(result);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e5      	bne.n	800361e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e010      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	429a      	cmp	r2, r3
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	429a      	cmp	r2, r3
 8003690:	f43f af48 	beq.w	8003524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3770      	adds	r7, #112	; 0x70
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036a0:	b084      	sub	sp, #16
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	f107 001c 	add.w	r0, r7, #28
 80036ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d120      	bne.n	80036fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4b20      	ldr	r3, [pc, #128]	; (800374c <USB_CoreInit+0xac>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fa96 	bl	8003c20 <USB_CoreReset>
 80036f4:	4603      	mov	r3, r0
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	e010      	b.n	800371c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa8a 	bl	8003c20 <USB_CoreReset>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10b      	bne.n	800373a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f043 0206 	orr.w	r2, r3, #6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003746:	b004      	add	sp, #16
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	ffbdffbf 	.word	0xffbdffbf

08003750 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 0201 	bic.w	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d115      	bne.n	80037c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037a0:	2001      	movs	r0, #1
 80037a2:	f7fd fb09 	bl	8000db8 <HAL_Delay>
      ms++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3301      	adds	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fa29 	bl	8003c04 <USB_GetMode>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d01e      	beq.n	80037f6 <USB_SetCurrentMode+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b31      	cmp	r3, #49	; 0x31
 80037bc:	d9f0      	bls.n	80037a0 <USB_SetCurrentMode+0x2e>
 80037be:	e01a      	b.n	80037f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037d2:	2001      	movs	r0, #1
 80037d4:	f7fd faf0 	bl	8000db8 <HAL_Delay>
      ms++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3301      	adds	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa10 	bl	8003c04 <USB_GetMode>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <USB_SetCurrentMode+0x84>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b31      	cmp	r3, #49	; 0x31
 80037ee:	d9f0      	bls.n	80037d2 <USB_SetCurrentMode+0x60>
 80037f0:	e001      	b.n	80037f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e005      	b.n	8003802 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b32      	cmp	r3, #50	; 0x32
 80037fa:	d101      	bne.n	8003800 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800380c:	b084      	sub	sp, #16
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800381a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e009      	b.n	8003840 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	3340      	adds	r3, #64	; 0x40
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	2200      	movs	r2, #0
 8003838:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3301      	adds	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b0e      	cmp	r3, #14
 8003844:	d9f2      	bls.n	800382c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11c      	bne.n	8003886 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e005      	b.n	8003892 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003898:	461a      	mov	r2, r3
 800389a:	2300      	movs	r3, #0
 800389c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a4:	4619      	mov	r1, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ac:	461a      	mov	r2, r3
 80038ae:	680b      	ldr	r3, [r1, #0]
 80038b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d10c      	bne.n	80038d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038be:	2100      	movs	r1, #0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f965 	bl	8003b90 <USB_SetDevSpeed>
 80038c6:	e008      	b.n	80038da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038c8:	2101      	movs	r1, #1
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f960 	bl	8003b90 <USB_SetDevSpeed>
 80038d0:	e003      	b.n	80038da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038d2:	2103      	movs	r1, #3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f95b 	bl	8003b90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038da:	2110      	movs	r1, #16
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f8f3 	bl	8003ac8 <USB_FlushTxFifo>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f91f 	bl	8003b30 <USB_FlushRxFifo>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003902:	461a      	mov	r2, r3
 8003904:	2300      	movs	r3, #0
 8003906:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390e:	461a      	mov	r2, r3
 8003910:	2300      	movs	r3, #0
 8003912:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	461a      	mov	r2, r3
 800391c:	2300      	movs	r3, #0
 800391e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	e043      	b.n	80039ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800393c:	d118      	bne.n	8003970 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003950:	461a      	mov	r2, r3
 8003952:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e013      	b.n	8003982 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	461a      	mov	r2, r3
 8003968:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e008      	b.n	8003982 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	461a      	mov	r2, r3
 800397e:	2300      	movs	r3, #0
 8003980:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398e:	461a      	mov	r2, r3
 8003990:	2300      	movs	r3, #0
 8003992:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a0:	461a      	mov	r2, r3
 80039a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	3301      	adds	r3, #1
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d3b7      	bcc.n	8003926 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	e043      	b.n	8003a44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039d2:	d118      	bne.n	8003a06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	461a      	mov	r2, r3
 80039e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e013      	b.n	8003a18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fc:	461a      	mov	r2, r3
 80039fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e008      	b.n	8003a18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a12:	461a      	mov	r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a36:	461a      	mov	r2, r3
 8003a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3301      	adds	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d3b7      	bcc.n	80039bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f043 0210 	orr.w	r2, r3, #16
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <USB_DevInit+0x2b4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f043 0208 	orr.w	r2, r3, #8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d105      	bne.n	8003ab0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <USB_DevInit+0x2b8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003abc:	b004      	add	sp, #16
 8003abe:	4770      	bx	lr
 8003ac0:	803c3800 	.word	0x803c3800
 8003ac4:	40000004 	.word	0x40000004

08003ac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <USB_FlushTxFifo+0x64>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e01b      	b.n	8003b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	daf2      	bge.n	8003ad6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	019b      	lsls	r3, r3, #6
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <USB_FlushTxFifo+0x64>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e006      	b.n	8003b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d0f0      	beq.n	8003b00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	00030d40 	.word	0x00030d40

08003b30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <USB_FlushRxFifo+0x5c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e018      	b.n	8003b80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	daf2      	bge.n	8003b3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <USB_FlushRxFifo+0x5c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e006      	b.n	8003b80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d0f0      	beq.n	8003b60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	00030d40 	.word	0x00030d40

08003b90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	68f9      	ldr	r1, [r7, #12]
 8003bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003bdc:	f023 0303 	bic.w	r3, r3, #3
 8003be0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0301 	and.w	r3, r3, #1
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <USB_CoreReset+0x64>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e01b      	b.n	8003c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	daf2      	bge.n	8003c2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <USB_CoreReset+0x64>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d0f0      	beq.n	8003c56 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	00030d40 	.word	0x00030d40

08003c88 <__libc_init_array>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4d0d      	ldr	r5, [pc, #52]	; (8003cc0 <__libc_init_array+0x38>)
 8003c8c:	4c0d      	ldr	r4, [pc, #52]	; (8003cc4 <__libc_init_array+0x3c>)
 8003c8e:	1b64      	subs	r4, r4, r5
 8003c90:	10a4      	asrs	r4, r4, #2
 8003c92:	2600      	movs	r6, #0
 8003c94:	42a6      	cmp	r6, r4
 8003c96:	d109      	bne.n	8003cac <__libc_init_array+0x24>
 8003c98:	4d0b      	ldr	r5, [pc, #44]	; (8003cc8 <__libc_init_array+0x40>)
 8003c9a:	4c0c      	ldr	r4, [pc, #48]	; (8003ccc <__libc_init_array+0x44>)
 8003c9c:	f000 f820 	bl	8003ce0 <_init>
 8003ca0:	1b64      	subs	r4, r4, r5
 8003ca2:	10a4      	asrs	r4, r4, #2
 8003ca4:	2600      	movs	r6, #0
 8003ca6:	42a6      	cmp	r6, r4
 8003ca8:	d105      	bne.n	8003cb6 <__libc_init_array+0x2e>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb0:	4798      	blx	r3
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	e7ee      	b.n	8003c94 <__libc_init_array+0xc>
 8003cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cba:	4798      	blx	r3
 8003cbc:	3601      	adds	r6, #1
 8003cbe:	e7f2      	b.n	8003ca6 <__libc_init_array+0x1e>
 8003cc0:	08003d18 	.word	0x08003d18
 8003cc4:	08003d18 	.word	0x08003d18
 8003cc8:	08003d18 	.word	0x08003d18
 8003ccc:	08003d1c 	.word	0x08003d1c

08003cd0 <memset>:
 8003cd0:	4402      	add	r2, r0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d100      	bne.n	8003cda <memset+0xa>
 8003cd8:	4770      	bx	lr
 8003cda:	f803 1b01 	strb.w	r1, [r3], #1
 8003cde:	e7f9      	b.n	8003cd4 <memset+0x4>

08003ce0 <_init>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr

08003cec <_fini>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr
